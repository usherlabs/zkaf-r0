use elliptic_curve::pkcs8::DecodePublicKey;
use tlsn_core::proof::SessionProof;

/// A simple verifier which reads a proof generated by `simple_prover.rs` from "proof.json", verifies
/// it and prints the verified data to the console.
#[no_mangle]
pub extern "C" fn verify_proof(session: &String, pub_key: &String) {
    // Verify the session proof against the Notary's public key
    //
    // This verifies the identity of the server using a default certificate verifier which trusts
    // the root certificates from the `webpki-roots` crate.
    let session_proof: SessionProof = serde_json::from_str(session).unwrap();
    let pub_key = match p256::PublicKey::from_public_key_pem(pub_key) {
        Ok(key) => key,
        Err(e) => panic!("INVALID PUBLIC KEY: {:?}", e),
    };
    match session_proof.verify_with_default_cert_verifier(pub_key) {
        Ok(_) => (),
        Err(e) => panic!("FAILED TO VERIFY SESSION: {:?}", e),
    };
}
